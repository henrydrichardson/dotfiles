set nocompatible
set exrc
set secure
set number
set noerrorbells


let data_dir = has('nvim') ? stdpath('data') . '/site' : '~/.vim'
if empty(glob(data_dir . '/autoload/plug.vim'))
  silent execute '!curl -fLo '.data_dir.'/autoload/plug.vim --create-dirs  https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim'
  autocmd VimEnter * PlugInstall --sync | source $MYVIMRC
endif


call plug#begin()

" Functionality Plugins.
Plug 'ctrlpvim/ctrlp.vim'
Plug 'tpope/vim-fugitive'
Plug 'dense-analysis/ale'
" Syntax Plugins.
Plug 'hashivim/vim-vagrant'
Plug 'hashivim/vim-terraform'
" Indentation Plugins
Plug 'vim-scripts/groovyindent-unix'

call plug#end()


let g:netrw_liststyle=3
let g:netrw_keepdir=0
color elfpriest

"ListChars Options
set listchars=trail:â–®,tab:>-,eol:$

au Filetype sh set tabstop=4 softtabstop=4 shiftwidth=4 expandtab

au BufRead,BufNewFile *.tf set filetype=terraform syntax=tf
autocmd FileType netrw setl bufhidden=delete

"Define Global Fixers for ALE
let g:ale_fixers = {
\   '*': ['remove_trailing_lines', 'trim_whitespace'],
\   'terraform': ['terraform'],
\   'python': [
\	'add_blank_lines_for_python_control_statements',
\	'autoflake',
\	'yapf',
\	'isort',
\	],
\   'sh': ['shfmt'],
\}

let g:ale_linters_ignore = {
\ 'python': ['pylint'],
\}

"Custom Maping to ALEFix
map <F4> :ALEFix<CR>
map <F3> :ALENext<CR>

"Define Global Linter Messages for ALE
let g:ale_echo_msg_format = '%linter%: %s'

let g:ale_virtualtext_cursor = 'disabled'

"If ripgrep is found on the system
if executable('rg')
	set grepprg=rg\ --color=never
	let g:ctrlp_user_command = 'rg %s --files --color=never --glob ""'
	let g:ctrlp_use_caching = 0
else
	echom "You can optimize your vim searchs by installing ripgrep!"
endif
